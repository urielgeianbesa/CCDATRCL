import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.InputMismatchException;
import java.util.Scanner;

public class App {
    public static void main(String[] args) {
        ArrayList<String> songList = new ArrayList<>();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("Updated Playlist:");
            System.out.println("   ");
            for (int i = 0; i < songList.size(); i++) {
                System.out.println((i + 1) + ". " + songList.get(i));
            }

            System.out.println("   ");

            System.out.println("Options:");
            System.out.println("   ");
            System.out.println("1. Add a favorite song");
            System.out.println("2. Remove a song");
            System.out.println("3. Replace a song");
            System.out.println("4. Arrange playlist alphabetically");
            System.out.println("5. Exit");
            System.out.println("    ");
            System.out.print("Please put your chosen option: ");
            System.out.println("    ");

            try {
                int choice = scanner.nextInt();
                scanner.nextLine();

                switch (choice) {
                    case 1:
                        System.out.print("Enter the name of your favorite song: ");
                        System.out.println("    ");
                        String favoriteSong = scanner.nextLine();
                        songList.add(favoriteSong);
                        break;
                    case 2:
                        System.out.print("Enter the index of the song to remove: ");
                        System.out.println("    ");
                        int indexToRemove = scanner.nextInt();
                        if (indexToRemove >= 1 && indexToRemove <= songList.size()) {
                            songList.remove(indexToRemove - 1);
                        } else {
                            System.out.println("Invalid index.");
                        }
                        break;
                    case 3:
                        System.out.print("Enter the index of the song to replace: ");
                        System.out.println("    ");
                        int indexToReplace = scanner.nextInt();
                        scanner.nextLine();
                        System.out.print("Enter the new song: ");
                        System.out.println("    ");
                        String newSong = scanner.nextLine();
                        if (indexToReplace >= 1 && indexToReplace <= songList.size()) {
                            songList.set(indexToReplace - 1, newSong);
                        } else {
                            System.out.println("Invalid index.");
                        }
                        break;
                    case 4:
                        System.out.println("Current Playlist:");
                        Collections.sort(songList, Comparator.naturalOrder());
                        preOrderTraverseByName(songList, 0);
                        System.out.println();
                        break;
                    case 5:
                        System.out.println("Goodbye!");
                        scanner.close();
                        System.exit(0);
                    default:
                        System.out.println("Invalid choice. Please try again.");
                        break;
                }
            } catch (InputMismatchException e) {
                System.out.println("Invalid input. Please enter another option:");
                System.out.println("    ");
                scanner.nextLine(); // consume the invalid input
            }
        }
    }

    private static void preOrderTraverseByName(ArrayList<String> songList, int index) {
        if (index < songList.size()) {
            System.out.println(songList.get(index));
            preOrderTraverseByName(songList, 2 * index + 1);
            preOrderTraverseByName(songList, 2 * index + 2);
        }
    }
}
